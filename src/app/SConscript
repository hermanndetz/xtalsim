import re
import os

Import('env')
Import('lib_sources')

for dir in env['MYPATH']:
   lib_sources.append(Glob('%s/*.cpp'%dir))
   lib_sources.append(Glob('%s/*.cc'%dir))

##################################################################

include_re = re.compile(r'^\#include\s+(\S+)$', re.M)

"""
searches for source files that are actually required to build
an application, this way only a certain amount of modules has to
be compiled if only a certain application is required
"""
def get_necessary_sources(sourceFile, sourcesList, visitedFiles):

   visitedFiles.append(sourceFile)
#   print(sourceFile)
#   print(visitedFiles)
   top_path = Dir('#').abspath
   if not os.path.exists(sourceFile):
      return
   
   content = open(sourceFile).read()
   includes = include_re.findall(content)
    
   for inc in includes:

      doAdd = True
      
      if inc[0] != '<':
         continue

      inc = inc[1:-1]
      dirName = inc.split(os.sep)
        
      if len(dirName) == 1:
         continue
        
      if dirName[0] not in env['MYPATH']:
         continue

      incName = inc.split('.')[0]
        
      sourceName = top_path + os.sep + incName + '.' + 'c'
      includeName = top_path + os.sep + incName + '.' + 'h'

      if not os.path.exists(sourceName):
         sourceName = sourceName[:-1] + 'cpp'
           
         if not os.path.exists(sourceName):
            sourceName = sourceName[:-3] + 'cc'
               
            if not os.path.exists(sourceName):
               doAdd = False

      if sourceName in sourcesList:
         doAdd = False

      if (doAdd == True):
         sourcesList.append(sourceName)
         if sourceName not in visitedFiles:
            get_necessary_sources(sourceName, sourcesList, visitedFiles)
         
      if includeName not in visitedFiles:
         get_necessary_sources(includeName, sourcesList, visitedFiles)

    
##################################################################

# fileList = ['test.cpp']
# get_necessary_sources(fileList[0], fileList, [])
# test_sources = env.File(fileList)
# env.Program('test', test_sources)

#-----------------------------------------------------------------

#fileList = ['ecalc.cpp']
#get_necessary_sources(fileList[0], fileList)
#ecalc_sources = env.File(fileList)
#env.Program('ecalc', ecalc_sources)


#-----------------------------------------------------------------

fileList = ['LatticeGenerator.cpp']
get_necessary_sources(fileList[0], fileList, [])
lgen_sources = env.File(fileList)
env.Program('LatticeGenerator', lgen_sources)

#-----------------------------------------------------------------

fileList = ['Optimizer.cpp']
get_necessary_sources(fileList[0], fileList, [])
opt_sources = env.File(fileList)
env.Program('Optimizer', opt_sources)

#-----------------------------------------------------------------

if ARGUMENTS.get('vtk', 0):
   fileList = ['Plot.cpp']
   get_necessary_sources(fileList[0], fileList, [])
   plot_sources = env.File(fileList)
   env.Program('Plot', plot_sources)

#-----------------------------------------------------------------

if ARGUMENTS.get('vtk', 0):
   fileList = ['Visualize.cpp']
   get_necessary_sources(fileList[0], fileList, [])
   vis_sources = env.File(fileList)
   env.Program('Visualize', vis_sources)

#-----------------------------------------------------------------

fileList = ['Evaluator.cpp']
get_necessary_sources(fileList[0], fileList, [])
ev_sources = env.File(fileList)
env.Program('Evaluator', ev_sources)

#-----------------------------------------------------------------

fileList = ['InterfaceGenerator.cpp']
get_necessary_sources(fileList[0], fileList, [])
ifGen_sources = env.File(fileList)
env.Program('InterfaceGenerator', ifGen_sources)

#-----------------------------------------------------------------

fileList = ['Extractor.cpp']
get_necessary_sources(fileList[0], fileList, [])
ex_sources = env.File(fileList)
env.Program('Extractor', ex_sources)


#-----------------------------------------------------------------

# Local variables:
# mode: python
# indent-tabs-mode: nil
# tab-width: 4
# End:
# vim:noexpandtab:sw=4:ts=4:
